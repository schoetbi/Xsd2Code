// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 2.8.2.21080
//    <NameSpace>Xsd2Code.TestUnit</NameSpace><Collection>ObservableCollection</Collection><codeType>CSharp</codeType><EnableDataBinding>True</EnableDataBinding><HidePrivateFieldInIDE>True</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><IncludeSerializeMethod>True</IncludeSerializeMethod><GenerateCloneMethod>True</GenerateCloneMethod><CodeBaseTag>Net20</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><DisableDebug>True</DisableDebug><CustomUsings></CustomUsings>
//  <auto-generated>
// ------------------------------------------------------------------------------
namespace Xsd2Code.TestUnit
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Collections.ObjectModel;
    using System.Runtime.Serialization;
    using System.Collections.Generic;


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Actor")]
    public partial class Actor
    {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string firstnameField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string lastnameField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool principalActorField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool principalActorFieldSpecified;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nationalityField;

        public Actor()
        {
            this.nationalityField = "US";
        }

        /// <remarks/>
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string firstname
        {
            get
            {
                return this.firstnameField;
            }
            set
            {
                if ((this.firstnameField != null))
                {
                    if ((firstnameField.Equals(value) != true))
                    {
                        this.firstnameField = value;
                        this.OnPropertyChanged("firstname");
                    }
                }
                else
                {
                    this.firstnameField = value;
                    this.OnPropertyChanged("firstname");
                }
            }
        }

        /// <remarks/>
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string lastname
        {
            get
            {
                return this.lastnameField;
            }
            set
            {
                if ((this.lastnameField != null))
                {
                    if ((lastnameField.Equals(value) != true))
                    {
                        this.lastnameField = value;
                        this.OnPropertyChanged("lastname");
                    }
                }
                else
                {
                    this.lastnameField = value;
                    this.OnPropertyChanged("lastname");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PrincipalActor
        {
            get
            {
                return this.principalActorField;
            }
            set
            {
                if ((principalActorField.Equals(value) != true))
                {
                    this.principalActorField = value;
                    this.OnPropertyChanged("PrincipalActor");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PrincipalActorSpecified
        {
            get
            {
                return this.principalActorFieldSpecified;
            }
            set
            {
                if ((principalActorFieldSpecified.Equals(value) != true))
                {
                    this.principalActorFieldSpecified = value;
                    this.OnPropertyChanged("PrincipalActorSpecified");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute("US")]
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nationality
        {
            get
            {
                return this.nationalityField;
            }
            set
            {
                if ((this.nationalityField != null))
                {
                    if ((nationalityField.Equals(value) != true))
                    {
                        this.nationalityField = value;
                        this.OnPropertyChanged("nationality");
                    }
                }
                else
                {
                    this.nationalityField = value;
                    this.OnPropertyChanged("nationality");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        private void OnPropertyChanged(string info)
        {
             
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(info));
            }
        }

        /// <summary>
        /// Serializes current Actor object into an XML document
        /// </summary>
        // <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(this.GetType());
            System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();
            xmlSerializer.Serialize(memoryStream, this);
            memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
            System.IO.StreamReader streamReader = new System.IO.StreamReader(memoryStream);
            return streamReader.ReadToEnd();
        }

        /// <summary>
        /// Deserializes workflow markup into an Actor object
        /// </summary>
        // <param name="xml">string workflow markup to deserialize</param>
        // <param name="obj">Output Actor object</param>
        // <param name="exception">output Exception value if deserialize failed</param>
        // <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Actor obj, out System.Exception exception)
        {
            exception = null;
            obj = null;
            try
            {
                System.IO.StringReader stringReader = new System.IO.StringReader(xml);
                System.Xml.XmlTextReader xmlTextReader = new System.Xml.XmlTextReader(stringReader);
                System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(typeof(Actor));
                obj = ((Actor)(xmlSerializer.Deserialize(xmlTextReader)));
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        /// <summary>
        /// Serializes current Actor object into file
        /// </summary>
        // <param name="fileName">full path of outupt xml file</param>
        // <param name="exception">output Exception value if failed</param>
        // <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                System.IO.StreamWriter streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        /// <summary>
        /// Deserializes workflow markup from file into an Actor object
        /// </summary>
        // <param name="xml">string workflow markup to deserialize</param>
        // <param name="obj">Output Actor object</param>
        // <param name="exception">output Exception value if deserialize failed</param>
        // <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Actor obj, out System.Exception exception)
        {
            exception = null;
            obj = null;
            try
            {
                System.IO.FileStream file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                System.IO.StreamReader sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString, out obj, out exception);
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        /// <summary>
        /// Create a clone of this Actor object
        /// </summary>
        public virtual Actor Clone()
        {
            return ((Actor)(this.MemberwiseClone()));
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "DvdCollection")]
    public partial class DvdCollection : System.ComponentModel.INotifyPropertyChanged
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<dvd> dvdsField;

        public DvdCollection()
        {
            if ((this.dvdsField == null))
            {
                this.dvdsField = new List<dvd>();
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Dvds")]
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<dvd> Dvds
        {
            get
            {
                return this.dvdsField;
            }
            set
            {
                if ((this.dvdsField != null))
                {
                    if ((dvdsField.Equals(value) != true))
                    {
                        this.dvdsField = value;
                        this.OnPropertyChanged("Dvds");
                    }
                }
                else
                {
                    this.dvdsField = value;
                    this.OnPropertyChanged("Dvds");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        private void OnPropertyChanged(string info)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(info));
            }
        }

        /// <summary>
        /// Serializes current DvdCollection object into an XML document
        /// </summary>
        // <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(this.GetType());
            System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();
            xmlSerializer.Serialize(memoryStream, this);
            memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
            System.IO.StreamReader streamReader = new System.IO.StreamReader(memoryStream);
            return streamReader.ReadToEnd();
        }

        /// <summary>
        /// Deserializes workflow markup into an DvdCollection object
        /// </summary>
        // <param name="xml">string workflow markup to deserialize</param>
        // <param name="obj">Output DvdCollection object</param>
        // <param name="exception">output Exception value if deserialize failed</param>
        // <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DvdCollection obj, out System.Exception exception)
        {
            exception = null;
            obj = null;
            try
            {
                System.IO.StringReader stringReader = new System.IO.StringReader(xml);
                System.Xml.XmlTextReader xmlTextReader = new System.Xml.XmlTextReader(stringReader);
                System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(typeof(DvdCollection));
                obj = ((DvdCollection)(xmlSerializer.Deserialize(xmlTextReader)));
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        /// <summary>
        /// Serializes current DvdCollection object into file
        /// </summary>
        // <param name="fileName">full path of outupt xml file</param>
        // <param name="exception">output Exception value if failed</param>
        // <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                System.IO.StreamWriter streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        /// <summary>
        /// Deserializes workflow markup from file into an DvdCollection object
        /// </summary>
        // <param name="xml">string workflow markup to deserialize</param>
        // <param name="obj">Output DvdCollection object</param>
        // <param name="exception">output Exception value if deserialize failed</param>
        // <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DvdCollection obj, out System.Exception exception)
        {
            exception = null;
            obj = null;
            try
            {
                System.IO.FileStream file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                System.IO.StreamReader sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString, out obj, out exception);
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        /// <summary>
        /// Create a clone of this DvdCollection object
        /// </summary>
        public virtual DvdCollection Clone()
        {
            return ((DvdCollection)(this.MemberwiseClone()));
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name = "dvd")]
    public partial class dvd : System.ComponentModel.INotifyPropertyChanged
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string titleField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Styles styleField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Actor> actorField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private int publishYearField;

        public dvd()
        {
            if ((this.actorField == null))
            {
                this.actorField = new List<Actor>();
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title
        {
            get
            {
                return this.titleField;
            }
            set
            {
                if ((this.titleField != null))
                {
                    if ((titleField.Equals(value) != true))
                    {
                        this.titleField = value;
                        this.OnPropertyChanged("Title");
                    }
                }
                else
                {
                    this.titleField = value;
                    this.OnPropertyChanged("Title");
                }
            }
        }

        /// <remarks/>
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Styles Style
        {
            get
            {
                return this.styleField;
            }
            set
            {
                if ((this.styleField != null))
                {
                    if ((styleField.Equals(value) != true))
                    {
                        this.styleField = value;
                        this.OnPropertyChanged("Style");
                    }
                }
                else
                {
                    this.styleField = value;
                    this.OnPropertyChanged("Style");
                }
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Actor")]
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<Actor> Actor
        {
            get
            {
                return this.actorField;
            }
            set
            {
                if ((this.actorField != null))
                {
                    if ((actorField.Equals(value) != true))
                    {
                        this.actorField = value;
                        this.OnPropertyChanged("Actor");
                    }
                }
                else
                {
                    this.actorField = value;
                    this.OnPropertyChanged("Actor");
                }
            }
        }

        /// <remarks/>
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PublishYear
        {
            get
            {
                return this.publishYearField;
            }
            set
            {
                if ((publishYearField.Equals(value) != true))
                {
                    this.publishYearField = value;
                    this.OnPropertyChanged("PublishYear");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        private void OnPropertyChanged(string info)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(info));
            }
        }

        /// <summary>
        /// Serializes current dvd object into an XML document
        /// </summary>
        // <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(this.GetType());
            System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();
            xmlSerializer.Serialize(memoryStream, this);
            memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
            System.IO.StreamReader streamReader = new System.IO.StreamReader(memoryStream);
            return streamReader.ReadToEnd();
        }

        /// <summary>
        /// Deserializes workflow markup into an dvd object
        /// </summary>
        // <param name="xml">string workflow markup to deserialize</param>
        // <param name="obj">Output dvd object</param>
        // <param name="exception">output Exception value if deserialize failed</param>
        // <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out dvd obj, out System.Exception exception)
        {
            exception = null;
            obj = null;
            try
            {
                System.IO.StringReader stringReader = new System.IO.StringReader(xml);
                System.Xml.XmlTextReader xmlTextReader = new System.Xml.XmlTextReader(stringReader);
                System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(typeof(dvd));
                obj = ((dvd)(xmlSerializer.Deserialize(xmlTextReader)));
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        /// <summary>
        /// Serializes current dvd object into file
        /// </summary>
        // <param name="fileName">full path of outupt xml file</param>
        // <param name="exception">output Exception value if failed</param>
        // <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                System.IO.StreamWriter streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        /// <summary>
        /// Deserializes workflow markup from file into an dvd object
        /// </summary>
        // <param name="xml">string workflow markup to deserialize</param>
        // <param name="obj">Output dvd object</param>
        // <param name="exception">output Exception value if deserialize failed</param>
        // <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out dvd obj, out System.Exception exception)
        {
            exception = null;
            obj = null;
            try
            {
                System.IO.FileStream file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                System.IO.StreamReader sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString, out obj, out exception);
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        /// <summary>
        /// Create a clone of this dvd object
        /// </summary>
        public virtual dvd Clone()
        {
            return ((dvd)(this.MemberwiseClone()));
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    public enum Styles
    {

        /// <remarks/>
        Action,

        /// <remarks/>
        Fiction,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Actors")]
    public partial class Actors : System.ComponentModel.INotifyPropertyChanged
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Actor> actorField;

        public Actors()
        {
            if ((this.actorField == null))
            {
                this.actorField = new List<Actor>();
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Actor")]
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<Actor> Actor
        {
            get
            {
                return this.actorField;
            }
            set
            {
                if ((this.actorField != null))
                {
                    if ((actorField.Equals(value) != true))
                    {
                        this.actorField = value;
                        this.OnPropertyChanged("Actor");
                    }
                }
                else
                {
                    this.actorField = value;
                    this.OnPropertyChanged("Actor");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        private void OnPropertyChanged(string info)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(info));
            }
        }

        /// <summary>
        /// Serializes current Actors object into an XML document
        /// </summary>
        // <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(this.GetType());
            System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();
            xmlSerializer.Serialize(memoryStream, this);
            memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
            System.IO.StreamReader streamReader = new System.IO.StreamReader(memoryStream);
            return streamReader.ReadToEnd();
        }

        /// <summary>
        /// Deserializes workflow markup into an Actors object
        /// </summary>
        // <param name="xml">string workflow markup to deserialize</param>
        // <param name="obj">Output Actors object</param>
        // <param name="exception">output Exception value if deserialize failed</param>
        // <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Actors obj, out System.Exception exception)
        {
            exception = null;
            obj = null;
            try
            {
                System.IO.StringReader stringReader = new System.IO.StringReader(xml);
                System.Xml.XmlTextReader xmlTextReader = new System.Xml.XmlTextReader(stringReader);
                System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(typeof(Actors));
                obj = ((Actors)(xmlSerializer.Deserialize(xmlTextReader)));
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        /// <summary>
        /// Serializes current Actors object into file
        /// </summary>
        // <param name="fileName">full path of outupt xml file</param>
        // <param name="exception">output Exception value if failed</param>
        // <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                System.IO.StreamWriter streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        /// <summary>
        /// Deserializes workflow markup from file into an Actors object
        /// </summary>
        // <param name="xml">string workflow markup to deserialize</param>
        // <param name="obj">Output Actors object</param>
        // <param name="exception">output Exception value if deserialize failed</param>
        // <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Actors obj, out System.Exception exception)
        {
            exception = null;
            obj = null;
            try
            {
                System.IO.FileStream file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                System.IO.StreamReader sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString, out obj, out exception);
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        /// <summary>
        /// Create a clone of this Actors object
        /// </summary>
        public virtual Actors Clone()
        {
            return ((Actors)(this.MemberwiseClone()));
        }
    }
}
